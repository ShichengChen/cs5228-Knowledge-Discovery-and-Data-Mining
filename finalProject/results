    #  Time taken: 0 hours 36 minutes and 32.98 seconds.
    # {'subsample': 0.9, 'n_estimators': 700, 'min_child_weight': 3, 'max_depth': 10, 'learning_rate': 0.05, 'colsample_bytree': 0.7}
    # 93.05

    #  Time taken: 0 hours 49 minutes and 33.57 seconds.
    # {'learning_rate': 0.15, 'l2_leaf_reg': 9, 'iterations': 300, 'depth': 7}
    # 92.82

    #  Time taken: 0 hours 35 minutes and 11.3 seconds.
    # {'subsample_freq': 20, 'subsample': 0.8, 'num_leaves': 50, 'n_estimators': 700, 'min_split_gain': 0.4, 'max_depth': 15, 'colsample_bytree': 0.8}
    # 92.89
    # 93.2
'''
######################
'''

    # {'subsample': 0.9, 'n_estimators': 700, 'min_child_weight': 1, 'max_depth': 10, 'learning_rate': 0.05,
    # 'colsample_bytree': 0.7}
    #  93.27
    #
    # {'learning_rate': 0.15, 'l2_leaf_reg': 9, 'iterations': 500, 'depth': 7}
    # 93.16
    #
    # {'subsample_freq': 20, 'subsample': 0.9, 'num_leaves': 50, 'n_estimators': 1000, 'min_split_gain': 0.3, 'max_depth': 20,
    #  'colsample_bytree': 0.7}
    # 93.06
    #
    # {'subsample': 0.8, 'n_estimators': 400, 'min_child_weight': 1, 'max_depth': 20, 'learning_rate': 0.05,
    #  'colsample_bytree': 0.9}
    # 92.82
    #
    # {'learning_rate': 0.15, 'l2_leaf_reg': 9, 'iterations': 500, 'depth': 7}
    # 93.28
    #
    # {'subsample_freq': 20, 'subsample': 0.8, 'num_leaves': 50, 'n_estimators': 400, 'min_split_gain': 0.4, 'max_depth': 25,
    #  'colsample_bytree': 0.8}
    # 92.94
    # 93.34
    # public leadboard 0.93600

#  Time taken: 0 hours 39 minutes and 43.73 seconds.
# {'subsample': 0.8, 'n_estimators': 700, 'min_child_weight': 2, 'max_depth': 10, 'learning_rate': 0.03, 'colsample_bytree': 0.9}
# 93.18
#
#  Time taken: 0 hours 30 minutes and 3.27 seconds.
# {'learning_rate': 0.1, 'l2_leaf_reg': 6, 'iterations': 900, 'depth': 6}
# 93.29
#
#  Time taken: 0 hours 10 minutes and 31.77 seconds.
# {'subsample': 0.8, 'num_leaves': 40, 'n_estimators': 700, 'min_split_gain': 0.5, 'max_depth': 25, 'colsample_bytree': 0.7}
# 93.13
#
#  Time taken: 0 hours 42 minutes and 37.97 seconds.
# {'subsample': 0.9, 'n_estimators': 700, 'min_child_weight': 1, 'max_depth': 10, 'learning_rate': 0.05, 'colsample_bytree': 0.7}
# 93.34
#
#  Time taken: 0 hours 28 minutes and 46.9 seconds.
# {'learning_rate': 0.15, 'l2_leaf_reg': 13, 'iterations': 700, 'depth': 7}
# 93.18
#
#  Time taken: 0 hours 10 minutes and 31.51 seconds.
# {'subsample': 0.8, 'num_leaves': 40, 'n_estimators': 1000, 'min_split_gain': 0.5, 'max_depth': 25, 'colsample_bytree': 0.7}
# 93.06
# 93.4
# public leadboard 0.93582


'''
#################################
'''

#  Time taken: 0 hours 44 minutes and 34.87 seconds.
# {'subsample': 0.8, 'n_estimators': 700, 'min_child_weight': 2, 'max_depth': 10, 'learning_rate': 0.03, 'colsample_bytree': 0.9}
# 93.14
#
#  Time taken: 0 hours 30 minutes and 46.12 seconds.
# {'learning_rate': 0.1, 'l2_leaf_reg': 6, 'iterations': 900, 'depth': 6}
# 93.21
#
#  Time taken: 0 hours 12 minutes and 17.61 seconds.
# {'subsample': 0.8, 'num_leaves': 100, 'n_estimators': 1500, 'min_split_gain': 0.5, 'max_depth': 20, 'colsample_bytree': 0.7}
# 93.14
#
#  Time taken: 0 hours 47 minutes and 56.8 seconds.
# {'subsample': 0.9, 'n_estimators': 700, 'min_child_weight': 1, 'max_depth': 10, 'learning_rate': 0.05, 'colsample_bytree': 0.7}
# 93.22
#
#  Time taken: 0 hours 29 minutes and 40.96 seconds.
# {'learning_rate': 0.1, 'l2_leaf_reg': 9, 'iterations': 700, 'depth': 7}
# 93.13
#
#  Time taken: 0 hours 9 minutes and 34.31 seconds.
# {'subsample': 0.8, 'num_leaves': 40, 'n_estimators': 1000, 'min_split_gain': 0.5, 'max_depth': 25, 'colsample_bytree': 0.7}
# 93.07
# 93.42
0.93562
'''
#####################################################################################
'''


#  Time taken: 2 hours 11 minutes and 20.16 seconds.
# {'subsample': 0.8, 'n_estimators': 700, 'min_child_weight': 2, 'max_depth': 10, 'learning_rate': 0.03, 'colsample_bytree': 0.9}
# make_scorer(roc_auc_score, needs_threshold=True)
#
#  Time taken: 0 hours 9 minutes and 4.07 seconds.
# {'learning_rate': 0.1, 'l2_leaf_reg': 9, 'iterations': 700, 'depth': 8}
# make_scorer(roc_auc_score, needs_threshold=True)
#
#  Time taken: 0 hours 1 minutes and 20.6 seconds.
# {'subsample': 0.8, 'num_leaves': 100, 'n_estimators': 1500, 'min_split_gain': 0.5, 'max_depth': 20, 'colsample_bytree': 0.7}
# make_scorer(roc_auc_score, needs_threshold=True)
#
#  Time taken: 2 hours 23 minutes and 57.58 seconds.
# {'subsample': 0.9, 'n_estimators': 700, 'min_child_weight': 1, 'max_depth': 10, 'learning_rate': 0.05, 'colsample_bytree': 0.7}
# make_scorer(roc_auc_score, needs_threshold=True)
#
#  Time taken: 0 hours 11 minutes and 11.29 seconds.
# {'learning_rate': 0.15, 'l2_leaf_reg': 13, 'iterations': 700, 'depth': 7}
# make_scorer(roc_auc_score, needs_threshold=True)
#
#  Time taken: 0 hours 1 minutes and 16.81 seconds.
# {'subsample': 0.7, 'num_leaves': 50, 'n_estimators': 700, 'min_split_gain': 0.4, 'max_depth': 15, 'colsample_bytree': 0.7}
# make_scorer(roc_auc_score, needs_threshold=True)
# full trainning dataset
# 0.93612

'''
#############
'''
#  Time taken: 2 hours 7 minutes and 48.43 seconds.
# {'subsample': 0.8, 'n_estimators': 700, 'min_child_weight': 2, 'max_depth': 10, 'learning_rate': 0.03, 'colsample_bytree': 0.9}
# make_scorer(roc_auc_score, needs_threshold=True)
#
#  Time taken: 0 hours 9 minutes and 3.15 seconds.
# {'learning_rate': 0.1, 'l2_leaf_reg': 11, 'iterations': 900, 'depth': 6}
# make_scorer(roc_auc_score, needs_threshold=True)
#
#  Time taken: 0 hours 1 minutes and 19.43 seconds.
# {'subsample': 0.8, 'num_leaves': 100, 'n_estimators': 1500, 'min_split_gain': 0.3, 'max_depth': 20, 'colsample_bytree': 0.7}
# make_scorer(roc_auc_score, needs_threshold=True)
#
#  Time taken: 2 hours 20 minutes and 57.15 seconds.
# {'subsample': 0.9, 'n_estimators': 700, 'min_child_weight': 1, 'max_depth': 10, 'learning_rate': 0.05, 'colsample_bytree': 0.7}
# make_scorer(roc_auc_score, needs_threshold=True)
#
#  Time taken: 0 hours 10 minutes and 58.81 seconds.
# {'learning_rate': 0.1, 'l2_leaf_reg': 6, 'iterations': 900, 'depth': 8}
# make_scorer(roc_auc_score, needs_threshold=True)
#
#  Time taken: 0 hours 1 minutes and 15.86 seconds.
# {'subsample': 0.7, 'num_leaves': 100, 'n_estimators': 700, 'min_split_gain': 0.5, 'max_depth': 20, 'colsample_bytree': 0.7}
# make_scorer(roc_auc_score, needs_threshold=True)

#leadboard 0.93620



 Time taken: 0 hours 53 minutes and 15.74 seconds.
{'subsample': 0.8, 'n_estimators': 700, 'min_child_weight': 2, 'max_depth': 10, 'learning_rate': 0.03, 'colsample_bytree': 0.9}
0.9777087142071016

 Time taken: 0 hours 8 minutes and 16.35 seconds.
{'learning_rate': 0.1, 'l2_leaf_reg': 6, 'iterations': 900, 'depth': 6}
0.9779209214596272

 Time taken: 0 hours 1 minutes and 10.68 seconds.
{'subsample': 0.8, 'num_leaves': 100, 'n_estimators': 1500, 'min_split_gain': 0.5, 'max_depth': 20, 'colsample_bytree': 0.7}
0.9776350356042904

 Time taken: 0 hours 58 minutes and 41.85 seconds.
{'subsample': 1, 'n_estimators': 700, 'min_child_weight': 2, 'max_depth': 10, 'learning_rate': 0.03, 'colsample_bytree': 0.9}
0.9772997192502187

 Time taken: 0 hours 10 minutes and 9.71 seconds.
{'learning_rate': 0.1, 'l2_leaf_reg': 9, 'iterations': 700, 'depth': 7}
0.9777416796541281

 Time taken: 0 hours 1 minutes and 6.24 seconds.
{'subsample': 0.8, 'num_leaves': 40, 'n_estimators': 1000, 'min_split_gain': 0.5, 'max_depth': 25, 'colsample_bytree': 0.7}
0.9774913390016885

#leadborad 0.93022



 Time taken: 2 hours 51 minutes and 15.55 seconds.
{'subsample': 0.9, 'n_estimators': 1000, 'min_child_weight': 6, 'max_depth': 10, 'learning_rate': 0.03, 'colsample_bytree': 0.6}
0.9802463631705051

 Time taken: 0 hours 10 minutes and 59.7 seconds.
{'learning_rate': 0.1, 'l2_leaf_reg': 4, 'iterations': 1100, 'depth': 6}
0.9799607894597613

 Time taken: 0 hours 1 minutes and 41.22 seconds.
{'subsample': 0.8, 'num_leaves': 100, 'n_estimators': 1500, 'min_split_gain': 0.3, 'max_depth': 20, 'colsample_bytree': 0.7}
0.9791790717874524

 Time taken: 3 hours 4 minutes and 47.85 seconds.
{'subsample': 0.9, 'n_estimators': 700, 'min_child_weight': 6, 'max_depth': 10, 'learning_rate': 0.03, 'colsample_bytree': 0.7}
0.9801755235803747

 Time taken: 0 hours 14 minutes and 11.04 seconds.
{'learning_rate': 0.1, 'l2_leaf_reg': 6, 'iterations': 900, 'depth': 7}
0.979909575586785

 Time taken: 0 hours 1 minutes and 39.78 seconds.
{'subsample': 0.9, 'num_leaves': 100, 'n_estimators': 1500, 'min_split_gain': 0.4, 'max_depth': 20, 'colsample_bytree': 0.7}
0.9790735032184578
#leadboard 0.93607



 Time taken: 2 hours 33 minutes and 31.15 seconds.
{'subsample': 0.9, 'n_estimators': 700, 'min_child_weight': 1, 'max_depth': 10, 'learning_rate': 0.03, 'colsample_bytree': 0.9}
0.93442

 Time taken: 0 hours 10 minutes and 19.2 seconds.
{'learning_rate': 0.15, 'l2_leaf_reg': 4, 'iterations': 900, 'depth': 6}
0.93456

 Time taken: 0 hours 4 minutes and 44.48 seconds.
{'subsample': 0.9, 'num_leaves': 300, 'n_estimators': 1000, 'min_split_gain': 0.2, 'max_depth': 20, 'learning_rate': 0.05, 'colsample_bytree': 0.7}
0.93254

 Time taken: 2 hours 28 minutes and 57.24 seconds.
{'subsample': 1, 'n_estimators': 1000, 'min_child_weight': 3, 'max_depth': 10, 'learning_rate': 0.03, 'colsample_bytree': 0.7}
0.93444

 Time taken: 0 hours 10 minutes and 17.1 seconds.
{'learning_rate': 0.1, 'l2_leaf_reg': 13, 'iterations': 900, 'depth': 8}
0.93458

 Time taken: 0 hours 4 minutes and 25.05 seconds.
{'subsample': 0.8, 'num_leaves': 300, 'n_estimators': 1500, 'min_split_gain': 0.2, 'max_depth': 25, 'learning_rate': 0.01, 'colsample_bytree': 0.7}
0.9325

#0.93587
#hard vote and remove light gbm, acc decrease to 0.93550



 Time taken: 0 hours 50 minutes and 46.48 seconds.
{'learning_rate': 0.2, 'l2_leaf_reg': 6, 'iterations': 1100, 'depth': 4}
0.93492
^[[A^[[A
 Time taken: 0 hours 17 minutes and 53.32 seconds.
{'subsample': 0.7, 'num_leaves': 100, 'n_estimators': 1000, 'min_split_gain': 0.4, 'max_depth': 20, 'learning_rate': 0.05, 'colsample_bytree': 0.7}
0.93344

 Time taken: 0 hours 49 minutes and 8.63 seconds.
{'learning_rate': 0.15, 'l2_leaf_reg': 4, 'iterations': 700, 'depth': 6}
0.93468

 Time taken: 0 hours 18 minutes and 58.22 seconds.
{'subsample': 0.9, 'num_leaves': 100, 'n_estimators': 1500, 'min_split_gain': 0.2, 'max_depth': 25, 'learning_rate': 0.01, 'colsample_bytree': 0.7}
0.93314






 Time taken: 1 hours 39 minutes and 41.68 seconds.
{'subsample': 0.9, 'n_estimators': 700, 'min_child_weight': 2, 'max_depth': 10, 'learning_rate': 0.05, 'colsample_bytree': 0.8}
0.93386

 Time taken: 0 hours 49 minutes and 18.62 seconds.
{'learning_rate': 0.1, 'l2_leaf_reg': 13, 'iterations': 1100, 'depth': 8}
0.93484

 Time taken: 0 hours 17 minutes and 6.21 seconds.
{'subsample': 0.7, 'num_leaves': 100, 'n_estimators': 700, 'min_split_gain': 0.3, 'max_depth': 50, 'learning_rate': 0.05, 'colsample_bytree': 0.7}
0.93346

 Time taken: 1 hours 50 minutes and 15.42 seconds.
{'subsample': 1, 'n_estimators': 1500, 'min_child_weight': 2, 'max_depth': 10, 'learning_rate': 0.03, 'colsample_bytree': 0.7}
0.93408

 Time taken: 0 hours 48 minutes and 1.38 seconds.
{'learning_rate': 0.2, 'l2_leaf_reg': 11, 'iterations': 700, 'depth': 7}
0.93454

 Time taken: 0 hours 17 minutes and 37.47 seconds.
{'subsample': 0.7, 'num_leaves': 100, 'n_estimators': 700, 'min_split_gain': 0.2, 'max_depth': 75, 'learning_rate': 0.05, 'colsample_bytree': 0.7}
0.93324
#old features
#public leadboard :0.93625



estimators=[
        ('1',XGBClassifier(objective='binary:logistic', silent=True, nthread=2, seed=0, verbosity=0,
                     **{'subsample': 0.9, 'n_estimators': 700, 'min_child_weight': 2, 'max_depth': 10, 'learning_rate': 0.05, 'colsample_bytree': 0.8})),
        ('2',cb.CatBoostClassifier(random_seed=0,silent=True,thread_count=2,
                     **{'learning_rate': 0.1, 'l2_leaf_reg': 13, 'iterations': 1100, 'depth': 8})),
        ('3',lgb.LGBMClassifier(random_state=0,silent = True,n_jobs=2,
                     **{'subsample': 0.7, 'num_leaves': 100, 'n_estimators': 700, 'min_split_gain': 0.3, 'max_depth': 50, 'learning_rate': 0.05, 'colsample_bytree': 0.7})),
        ('4', XGBClassifier(objective='binary:logistic', silent=True, nthread=2, seed=1, verbosity=0,
                     **{'subsample': 1, 'n_estimators': 1500, 'min_child_weight': 2, 'max_depth': 10, 'learning_rate': 0.03, 'colsample_bytree': 0.7})),
        ('5', cb.CatBoostClassifier(random_seed=1, silent=True,thread_count=2,
                     **{'learning_rate': 0.2, 'l2_leaf_reg': 11, 'iterations': 700, 'depth': 7})),
        ('6', lgb.LGBMClassifier(random_state=1, silent=True,n_jobs=2,
                     **{'subsample': 0.7, 'num_leaves': 100, 'n_estimators': 700, 'min_split_gain': 0.2, 'max_depth': 75, 'learning_rate': 0.05, 'colsample_bytree': 0.7})),
        ('7', XGBClassifier(objective='binary:logistic', silent=True, nthread=2, seed=0, verbosity=0,
                            **{'subsample': 1, 'n_estimators': 700, 'min_child_weight': 1, 'max_depth': 10, 'learning_rate': 0.03, 'colsample_bytree': 0.6})),
        ('8', cb.CatBoostClassifier(random_seed=0, silent=True,thread_count=2,
                                    **{'learning_rate': 0.1, 'l2_leaf_reg': 13, 'iterations': 1100, 'depth': 8})),
        ('9', lgb.LGBMClassifier(random_state=0, silent=True,n_jobs=2,
                                 **{'subsample': 0.9, 'num_leaves': 120, 'n_estimators': 1000, 'min_split_gain': 0.4, 'max_depth': 15, 'learning_rate': 0.05, 'colsample_bytree': 0.7})),
        ('10', XGBClassifier(objective='binary:logistic', silent=True, nthread=2, seed=1, verbosity=0,
                            **{'subsample': 0.8, 'n_estimators': 700, 'min_child_weight': 2, 'max_depth': 10, 'learning_rate': 0.03, 'colsample_bytree': 0.8})),
        ('11', cb.CatBoostClassifier(random_seed=1, silent=True,thread_count=2,
                                    **{'learning_rate': 0.15, 'l2_leaf_reg': 13, 'iterations': 1100, 'depth': 7})),
        ('12', lgb.LGBMClassifier(random_state=1, silent=True,n_jobs=2,
                                 **{'subsample': 0.8, 'num_leaves': 120, 'n_estimators': 1500, 'min_split_gain': 0.2, 'max_depth': 80, 'learning_rate': 0.01, 'colsample_bytree': 0.7})),
        ('13', XGBClassifier(objective='binary:logistic', silent=True, nthread=2, seed=1, verbosity=0,
                            **{'subsample': 1, 'n_estimators': 700, 'min_child_weight': 6, 'max_depth': 12, 'learning_rate': 0.03, 'colsample_bytree': 0.7})),
        ('14', cb.CatBoostClassifier(random_seed=1, silent=True,thread_count=2,
                                    **{'learning_rate': 0.1, 'l2_leaf_reg': 11, 'iterations': 1100, 'depth': 7})),
        ('15', lgb.LGBMClassifier(random_state=1, silent=True,n_jobs=2,
                                 **{'subsample': 0.8, 'num_leaves': 120, 'n_estimators': 1000, 'min_split_gain': 0.5, 'max_depth': 15, 'learning_rate': 0.01, 'colsample_bytree': 0.7})),
    ]
0.9332
## df["ApprovalFY"][df["ApprovalFY"].isna()] = df["ApprovalFY"][df["ApprovalFY"].notna()].median()
# df['ApprovalFY'] = df['ApprovalFY'].astype(int) use this strange feature
# for above 15 models and bestfeature before leadboard:  0.93630
# chang strange feature leadboard score voting: 0.93677, stacking: 0.93660
# change second strange feature disbursementdata leadboard score 0.93670



 Time taken: 2 hours 3 minutes and 53.49 seconds.
{'subsample': 0.9, 'n_estimators': 700, 'min_child_weight': 1, 'max_depth': 10, 'learning_rate': 0.03, 'colsample_bytree': 0.9}
0.9341

 Time taken: 1 hours 9 minutes and 59.63 seconds.
{'learning_rate': 0.1, 'l2_leaf_reg': 4, 'iterations': 900, 'depth': 7}
0.93432

 Time taken: 0 hours 24 minutes and 49.81 seconds.
{'subsample': 0.7, 'num_leaves': 100, 'n_estimators': 700, 'min_split_gain': 0.3, 'max_depth': 50, 'learning_rate': 0.05, 'colsample_bytree': 0.7}
0.93358

 Time taken: 2 hours 2 minutes and 47.52 seconds.
{'subsample': 1, 'n_estimators': 1500, 'min_child_weight': 2, 'max_depth': 10, 'learning_rate': 0.03, 'colsample_bytree': 0.7}
0.93394

 Time taken: 0 hours 50 minutes and 2.14 seconds.
{'learning_rate': 0.1, 'l2_leaf_reg': 13, 'iterations': 900, 'depth': 8}
0.93478

 Time taken: 0 hours 18 minutes and 20.46 seconds.
{'subsample': 0.9, 'num_leaves': 100, 'n_estimators': 1500, 'min_split_gain': 0.5, 'max_depth': 25, 'learning_rate': 0.05, 'colsample_bytree': 0.7}
0.93378

#leadborad 0.93587



    estimators=[
        ('1',XGBClassifier(objective='binary:logistic', silent=True, nthread=2, seed=0, verbosity=0,
                     **{'subsample': 1, 'n_estimators': 700, 'min_child_weight': 1, 'max_depth': 10, 'learning_rate': 0.03, 'colsample_bytree': 0.6})),
        ('2',cb.CatBoostClassifier(random_seed=0,silent=True,thread_count=2,
                     **{'learning_rate': 0.15, 'l2_leaf_reg': 4, 'iterations': 900, 'depth': 7})),
        ('3',lgb.LGBMClassifier(random_state=0,silent = True,n_jobs=2,
                     **{'subsample': 0.8, 'num_leaves': 100, 'n_estimators': 700, 'min_split_gain': 0.4, 'max_depth': 90, 'learning_rate': 0.05, 'colsample_bytree': 0.7})),
        ('4', XGBClassifier(objective='binary:logistic', silent=True, nthread=2, seed=1, verbosity=0,
                     **{'subsample': 1, 'n_estimators': 700, 'min_child_weight': 6, 'max_depth': 12, 'learning_rate': 0.03, 'colsample_bytree': 0.7})),
        ('5', cb.CatBoostClassifier(random_seed=1, silent=True,thread_count=2,
                     **{'learning_rate': 0.1, 'l2_leaf_reg': 11, 'iterations': 1100, 'depth': 7})),
        ('6', lgb.LGBMClassifier(random_state=1, silent=True,n_jobs=2,
                     **{'subsample': 1, 'num_leaves': 200, 'n_estimators': 1500, 'min_split_gain': 0.3, 'max_depth': 15, 'learning_rate': 0.01, 'colsample_bytree': 0.7})),
        ('7', XGBClassifier(objective='binary:logistic', silent=True, nthread=2, seed=2, verbosity=0,
                            **{'subsample': 0.9, 'n_estimators': 1000, 'min_child_weight': 6, 'max_depth': 7, 'learning_rate': 0.03, 'colsample_bytree': 0.8})),
        ('8', cb.CatBoostClassifier(random_seed=2, silent=True,thread_count=2,
                                    **{'learning_rate': 0.1, 'l2_leaf_reg': 4, 'iterations': 1100, 'depth': 7})),
        ('9', lgb.LGBMClassifier(random_state=2, silent=True,n_jobs=2,
                                 **{'subsample': 0.9, 'num_leaves': 100, 'n_estimators': 1500, 'min_split_gain': 0.3, 'max_depth': 80, 'learning_rate': 0.01, 'colsample_bytree': 0.7})),
        ('10', XGBClassifier(objective='binary:logistic', silent=True, nthread=2, seed=3, verbosity=0,
                            **{'subsample': 1, 'n_estimators': 1000, 'min_child_weight': 1, 'max_depth': 10, 'learning_rate': 0.03, 'colsample_bytree': 0.7})),
        ('11', cb.CatBoostClassifier(random_seed=3, silent=True,thread_count=2,
                                    **{'learning_rate': 0.1, 'l2_leaf_reg': 6, 'iterations': 1100, 'depth': 6})),
        ('12', lgb.LGBMClassifier(random_state=3, silent=True,n_jobs=2,
                                 **{'subsample': 1, 'num_leaves': 120, 'n_estimators': 1500, 'min_split_gain': 0.5, 'max_depth': 75, 'learning_rate': 0.1, 'colsample_bytree': 0.7})),
        ('13', XGBClassifier(objective='binary:logistic', silent=True, nthread=2, seed=4, verbosity=0,
                            **{'subsample': 1, 'n_estimators': 1000, 'min_child_weight': 2, 'max_depth': 7, 'learning_rate': 0.03, 'colsample_bytree': 0.7})),
        ('14', cb.CatBoostClassifier(random_seed=4, silent=True,thread_count=2,
                                    **{'learning_rate': 0.1, 'l2_leaf_reg': 9, 'iterations': 1100, 'depth': 8})),
        ('15', lgb.LGBMClassifier(random_state=4, silent=True,n_jobs=2,
                                 **{'subsample': 1, 'num_leaves': 100, 'n_estimators': 1000, 'min_split_gain': 0.4, 'max_depth': 75, 'learning_rate': 0.1, 'colsample_bytree': 0.7})),
    ]
# new feature "before is not usefull, degrate the perfermance" leadboard is 0.93662




[{'subsample': 1, 'n_estimators': 700, 'min_child_weight': 1, 'max_depth': 10, 'learning_rate': 0.03, 'colsample_bytree': 0.6},
{'learning_rate': 0.15, 'l2_leaf_reg': 14, 'iterations': 900, 'depth': 6},
{'subsample': 1, 'num_leaves': 100, 'n_estimators': 700, 'min_split_gain': 0.3, 'max_depth': 15, 'learning_rate': 0.05, 'colsample_bytree': 0.7},
 {'subsample': 1, 'n_estimators': 700, 'min_child_weight': 6, 'max_depth': 12, 'learning_rate': 0.03, 'colsample_bytree': 0.7},
  {'learning_rate': 0.1, 'l2_leaf_reg': 1, 'iterations': 900, 'depth': 7},
   {'subsample': 0.9, 'num_leaves': 120, 'n_estimators': 700, 'min_split_gain': 0.2, 'max_depth': 25, 'learning_rate': 0.05, 'colsample_bytree': 0.7},
   {'subsample': 0.8, 'n_estimators': 700, 'min_child_weight': 1, 'max_depth': 10, 'learning_rate': 0.05, 'colsample_bytree': 0.6},
    {'learning_rate': 0.1, 'l2_leaf_reg': 12, 'iterations': 1100, 'depth': 8},
     {'subsample': 0.9, 'num_leaves': 70, 'n_estimators': 1500, 'min_split_gain': 0.2, 'max_depth': 25, 'learning_rate': 0.05, 'colsample_bytree': 0.7},
      {'subsample': 1, 'n_estimators': 1000, 'min_child_weight': 1, 'max_depth': 10, 'learning_rate': 0.03, 'colsample_bytree': 0.7},
       {'learning_rate': 0.1, 'l2_leaf_reg': 11, 'iterations': 900, 'depth': 7},
       {'subsample': 0.8, 'num_leaves': 100, 'n_estimators': 800, 'min_split_gain': 0.3, 'max_depth': 90, 'learning_rate': 0.05, 'colsample_bytree': 0.7},
        {'subsample': 1, 'n_estimators': 1000, 'min_child_weight': 2, 'max_depth': 7, 'learning_rate': 0.03, 'colsample_bytree': 0.7},
        {'learning_rate': 0.15, 'l2_leaf_reg': 11, 'iterations': 900, 'depth': 6},
         {'subsample': 0.7, 'num_leaves': 100, 'n_estimators': 800, 'min_split_gain': 0.5, 'max_depth': 20, 'learning_rate': 0.05, 'colsample_bytree': 0.7}]
[0.9350799999999999, 0.9353, 0.93344, 0.93496, 0.9355800000000002, 0.93438, 0.93406, 0.93542, 0.9335000000000001, 0.93428,
 0.9347799999999999, 0.9337200000000001, 0.93428, 0.9352199999999999, 0.9338600000000001]

